{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","name","email","CardList","monsters","map","index","SearchBox","placeholder","handleChange","type","onChange","App","state","string","searchField","fetch","then","resp","json","users","setState","this","filterMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAACC,GACjB,OACA,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACR,6BAAKJ,EAAMG,QAAQE,OACnB,4BAAIL,EAAMG,QAAQG,YCJbC,G,MAAW,SAACP,GACrB,OACA,qBAAKC,UAAU,YAAf,SACKD,EAAMQ,SAASC,KAAI,SAACN,EAAQO,GAAT,OAChB,cAAC,EAAD,CAAuBP,QAASA,GAArBA,EAAQC,WCLlBO,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OAAO,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCoCxEG,E,kDAjCb,aAAe,IAAD,8BACZ,gBAGKC,MAAQ,CACXC,OAAQ,iBACRV,SAAU,GACVW,YAAa,IAPH,E,qDAad,WAAqB,IAAD,OAElBC,MAAM,8CACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEjB,SAAUgB,S,oBAI7C,WAAU,IAAD,SAE2BE,KAAKT,MAA/BT,EAFD,EAECA,SAAUW,EAFX,EAEWA,YACZQ,EAAiBnB,EAASoB,QAAO,SAAAzB,GAAO,OAAIA,EAAQE,KAAKwB,cAAcC,SAASX,EAAYU,kBAClG,OACE,sBAAK5B,UAAU,MAAf,UACE,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAc,SAAAkB,GAAC,OAAI,EAAKN,SAAS,CAAEN,YAAaY,EAAEC,OAAOC,WAClG,cAAC,EAAD,CAAUzB,SAAUmB,W,GA9BVO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.845b7f10.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => {\r\n    return (\r\n    <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n        <h1>{props.monster.name}</h1>\r\n        <p>{props.monster.email}</p>        \r\n    </div>)\r\n}","import React from \"react\";\r\nimport { Card } from \"../card/card.component\";\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = (props) => {\r\n    return (\r\n    <div className=\"card-list\">\r\n        {props.monsters.map((monster,index) =>\r\n            <Card key={monster.id} monster={monster} />\r\n        )}   \r\n    </div>)\r\n}","import React from 'react';\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => {\r\n    return <input className='search' type='search' placeholder={placeholder} onChange={handleChange} />\r\n}","import './App.css';\r\nimport { Component } from \"react\";\r\nimport { CardList } from \"./components/card-list/card-list.component\";\r\nimport { SearchBox } from \"./components/search-box/search-box.component\";\r\n\r\nclass App extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    //set the state\r\n    this.state = {\r\n      string: 'Ashvin Jaiswal',\r\n      monsters: [],\r\n      searchField: ''\r\n    }\r\n  }\r\n\r\n  //LifeCycle Called immediately after a component is mounted. \r\n  // Setting state here will trigger re-rendering.\r\n  componentDidMount() {\r\n    //fecth the data and render on the page\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(resp => resp.json())\r\n      .then(users => this.setState({ monsters: users }))\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    const { monsters, searchField } = this.state;\r\n    const filterMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\r\n    return (\r\n      <div className=\"App\">\r\n        <SearchBox placeholder='search monsters' handleChange={e => this.setState({ searchField: e.target.value })} />\r\n        <CardList monsters={filterMonsters} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}